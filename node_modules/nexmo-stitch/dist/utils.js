/*
 * Nexmo Stitch SDK
 *  Utility functions
 *
 * Copyright (c) Nexmo Inc. 2015-2018
 */
var uuid = require('uuid');



/**
 * Utilities class for the SDK.
 *  
 * @class Utils
 */
class Utils {
    /**
     * Get the Member from the username of a conversation
     * 
     * @param {string} username the username of the member to get
     * @param {Conversation} conversation the Conversation to search in
     * @returns {Member} the requested Member
     * @static
     * @private
     */
    static getMemberFromNameOrNull(conversation, username) {
        if (!conversation || !username) return null;
        for (var member_id in conversation.members) {
            if (conversation.members[member_id].user.name === username) {
                return conversation.members[member_id];
            }
        }
        return null;
    }

    /**
     * Perform a network GET request to the given url with the given data object
     * 
     * @param {string} url the url to GET
     * @param {object} [data] the data to send
     * @returns {Promise<XMLHttpRequest.response>} the XMLHttpRequest.response
     * @static
     * @private
     */
    static networkFetch(url, data) {
        return Utils.getToken().then((token) => {

            return new Promise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                xhr.open("GET", url);
                xhr.setRequestHeader("Authorization", "Bearer " + token);
                xhr.responseType = 'arraybuffer';
                xhr.onload = function() {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        resolve(this.response);
                    }
                };
                xhr.onerror = (error) => {
                    reject(new NexmoClientError(error));
                }
                xhr.send(data);
            });
        });
    }

    /**
     * Perform a network POST request to the given url with the given data object
     * 
     * @param {string} url the url to POST
     * @returns {Promise<XMLHttpRequest>} the XMLHttpRequest
     * @static
     * @private
     */
    static networkSend(url, data) {
        return Utils.getToken().then((token) => {
            return new Promise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                xhr.open("POST", url);
                xhr.setRequestHeader("Authorization", "Bearer " + token);
                xhr.onloadstart = () => {
                    resolve(xhr);
                };
                xhr.onerror = (error) => {
                    reject(new NexmoClientError(error));
                }
                xhr.send(data);
            });
        });
    }

    static getToken() {
        if (!localStorage.getItem("NXMO_user_data")) {
            return Promise.reject(new NexmoClientError("error:user:relogin"));
        } else {
            return Promise.resolve(JSON.parse(localStorage.getItem("NXMO_user_data")).token);
        }
    }

    static allocateUUID() {
        return uuid.v4();
    }
}

module.exports = Utils;
