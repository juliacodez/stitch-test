/*
 * Nexmo Stitch SDK
 *  Main wrapper
 *
 * Copyright (c) Nexmo Inc. 2017
 */

const WildEmitter = require('wildemitter');
const socket_io = require('socket.io-client');
const logger = require('loglevel');
const prefix = require('loglevel-plugin-prefix');

const Utils = require('./utils');
const RTC_Cache = require('./modules/rtc_cache');
const Application = require('./application');
const User = require('./user')

prefix.reg(logger);

prefix.apply(logger, {
	template: '[%t] %l (NXM-%n):',
	timestampFormatter: (date) => {
		return date.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, '$1');
	},
	levelFormatter: (level) => {
		return level.toUpperCase();
	},
	nameFormatter: (name) => {
		return name || 'SDK';
	}
});

// Conversation Client Error
const ConversationClientError = require('./conversationClientError');

const NexmoApiError = ConversationClientError.NexmoApiError;
const NexmoClientError = ConversationClientError.NexmoClientError;

/**
 * The parent ConversationClient class.
 *
 * @class ConversationClient
 * @param {object} [params]
 * @param {Boolean} params.debug=false set mode to debug
 * @param {string} params.url=nexmo_ws_url Nexmo Conversation Websocket url
 * @param {string} params.path=/rtc Nexmo Conversation Websocket url path suffix
 * @param {Boolean} params.reconnection=true socket.io reconnection attribute
 * @param {Boolean} params.forceNew=true socket.io forceNew attribute
 * @param {Boolean} params.autoConnect=true socket.io autoConnect attribute
 * @param {string} params.ips_url=ips_url Nexmo IPS url for image upload
 * @param {string} params.environment='production' development / production environment
 * @param {object} params.iceServers=[{'stun:stun.l.google.com:19302'}] iceServers for RTCPeerConnection
 *
 * @emits ConversationClient#ready
 */

class ConversationClient {
	constructor(params) {
		//save an array of instances
		const options = params || {};
		const config = this.config = {
			autoConnect: true,
			bugsnag_key: 'cd2dcd56892c3cd260b12caf6eecf022',
			cache: true,
			debug: false,
			enable_log_reporter: true,
			environment: 'production',
			forceNew: true,
			ips_url: 'https://api.nexmo.com/v1/image',
			path: '/rtc',
			reconnection: true,
			repository: 'https://github.com/Nexmo/conversation-js-sdk',
			SDK_version: '1.0.14',
			url: 'https://ws.nexmo.com',
			iceServers: [{
				urls: 'stun:stun.l.google.com:19302'
			}],
			rtcstarts_enables: false,
			rtcstarts_url: '@@rtcstarts_url'
		};
		let connection;
		this.sessionReady = false;
		this.requests = {};
		this.application = null;

		// set our config from options
		Object.assign(this.config, options);

		if (config.debug === true) {
			logger.setLevel("debug");
		} else {
			logger.setLevel("silent");
		}
		this.log = logger.noConflict();

		//inject bug reporting tool
		if (config.enable_log_reporter) {
			function j(u, c) {
				let h = document.getElementsByTagName('head')[0],
					s = document.createElement('script');
				s.async = true;
				s.src = u;
				s.onload = s.onreadystatechange = function() {
					if (!s.readyState || /loaded|complete/.test(s.readyState)) {
						s.onload = s.onreadystatechange = null;
						s = undefined;
						if (c) {
							c();
						}
					}
				};
				h.insertBefore(s, h.firstChild);
			}


			if (typeof document !== "undefined") {
				j("//d2wy8f7a9ursnm.cloudfront.net/bugsnag-3.min.js", () => {
					if (typeof Bugsnag !== "undefined") {
						if (!Bugsnag.apiKey) {
							Bugsnag.apiKey = this.config.bugsnag_key;
							Bugsnag.releaseStage = this.config.environment;
							Bugsnag.appVersion = this.config.SDK_version;
							Bugsnag.repository = this.config.repository;
							Bugsnag.disableAutoBreadcrumbs();
						}
					}
				});
			}
		}

		// Create the socket.io connection and allow multiple instances
		connection = socket_io.connect(config.url, {
			path: config.path,
			forceNew: config.forceNew,
			reconnection: config.reconnection,
			autoConnect: config.autoConnect
		});

		this.connection = connection;

		if (config.cache) {
			this.cache = new RTC_Cache(this);
			this.cache.init(this);
		}

		/**
		 * Ready event.
		 *
		 * @event ConversationClient#ready
		 * @example <caption>Listen to websocket ready event </caption>
		 *     rtc.on("ready", () => {
		 *      console.log("connection ready");
		 *     });
		 */
		connection.on('connect', () => {
			this.emit('ready');
			this.sessionReady = true;
			this.log.info('websocket ready');
		});

		// Listen to socket.io events
		/**
		 * Connecting event.
		 *
		 * @event ConversationClient#connecting
		 * @example <caption>Listen to websocket connecting event </caption>
		 *     rtc.on("connecting", () => {
		 *      console.log("connecting");
		 *     });
		 */
		connection.on('connecting', () => {
			this.emit('connecting');
			this.log.info('websocket connecting');
		});
		/**
		 * Disconnect event.
		 *
		 * @event ConversationClient#disconnect
		 * @example <caption>Listen to websocket disconnect event </caption>
		 *     rtc.on("disconnect", () => {
		 *      console.log("disconnect");
		 *     });
		 */
		connection.on('disconnect', () => {
			this.emit('disconnect');
			this.log.info('websocket disconnected');
		});
		/**
		 * Reconnect event.
		 *
		 * @event ConversationClient#reconnect
		 * @example <caption>Listen to websocket reconnect event </caption>
		 *     rtc.on("reconnect", (retry_number) => {
		 *      console.log("reconnect", retry_number);
		 *     });
		 */
		connection.on('reconnect', (retry_number) => {
			this.emit('reconnect', retry_number);
			if (this.cache && this.cache.user_data) {
				this.login(this.cache.user_data.token);
				this.log.info('websocket reconnected');
			}
		});
		/**
		 * Reconnecting event.
		 *
		 * @event ConversationClient#reconnecting
		 * @example <caption>Listen to websocket reconnecting event </caption>
		 *     rtc.on("reconnecting", (retry_number) => {
		 *      console.log("reconnecting", retry_number);
		 *     });
		 */
		connection.on('reconnecting', (retry_number) => {
			this.emit('reconnecting', retry_number);
			this.log.info('websocket reconnecting');
		});
		/**x
		 * Error event.
		 *
		 * @event ConversationClient#error
		 * @example <caption>Listen to websocket error event </caption>
		 *     rtc.on("error", (error) => {
		 *      console.log("error", error);
		 *     });
		 */
		connection.on('error', (error) => {
			this.emit('error', new NexmoClientError(error))
			this.log.error("Socket.io reported a generic error", error);
		});

		connection.io.on('packet', (packet) => {
			if (packet.type !== 2) return;
			if (packet.data[0] === 'echo') return; //ignore echo events
			const response = packet.data[1];
			// Set the type of the response
			response.type = packet.data[0];
			this.log.debug('<--', response.type, response);
			if (response.rid in this.requests) {
				const callback = this.requests[response.rid].callback;
				delete this.requests[response.rid];
				delete response.delay;
				callback(response);
			} else {
				// This is an unsolicited event
				// we emit it in application level.
				if (this.application)
					this.application._handleEvent(response);
			}
		});
		WildEmitter.mixin(ConversationClient);
	}

	/**
	 * Conversation listening for text events.
	 *
	 * @event Conversation#text
	 *
	 * @property {Member} sender - The sender of the text
	 * @property {Text} text - The text message received
	 * @example <caption>listen for text events</caption>
	 * conversation.on("text",(sender, message) => {
	 *      console.log(sender,message);
	 *
	 * // Identify your own message.
	 *      if (message.from !== conversation.me.id)
	 *
	 * // Identify if the event corresponds to the currently open conversation.
	 *      if (message.cid === conversation.id)
	 * });
	 */
	/**
	 *
	 *  Conversation listening for image events.
	 *
	 * @event Conversation#image
	 *
	 * @property {Member} sender - The sender of the image
	 * @property {ImageEvent} image - The image message received
	 * @example <caption>listen for image events</caption>
	 * conversation.on("image", (sender, image) => {
	 *      console.log(sender,image);
	 *
	 * // Identify your own imageEvent.
	 *      if (image.from !== conversation.me.id)
	 *
	 *  // Identify if the event corresponds to the currently open conversation.
	 *      if (image.cid === conversation.id)
	 * });
	 */
	/**
	 * Conversation listening for deleted events.
	 *
	 * @event Conversation#event:delete
	 *
	 * @property {Member} member - the member who deleted an event
	 * @property {Event} event - deleted event: event.id
	 * @example <caption>get details about the deleted event</caption>
	 * conversation.on("event:delete", (member, event) => {
	 *      console.log(event.id);
	 *      console.log(event.body.timestamp.deleted);
	 * });
	 */
	/**
	 * Conversation listening for new members.
	 *
	 * @event Conversation#member:joined
	 *
	 * @property {Member} member - the member that joined
	 * @property {Event} event - the join event
	 * @example <caption>get the name of the new member</caption>
	 * conversation.on("member:joined", (member, event) => {
	 * 		console.log(event.id)
	 *      console.log(member.user.name+ " joined the conversation");
	 * });
	 */
	/**
	 * Conversation listening for members being invited.
	 *
	 * @event Conversation#member:invited
	 *
	 * @property {Member} member - the member that is invited
	 * @property {Event} event - data regarding the receiver of the invitation
	 * @example <caption>get the name of the invited member</caption>
	 * conversation.on("member:invited", (member, event) => {
	 *      console.log(member.user.name + " invited to the conversation");
	 * });
	 */
	/**
	 * Conversation listening for members leaving (kicked or left).
	 *
	 * @event Conversation#member:left
	 *
	 * @property {Member} member - the member that has left
	 * @property {Event} event - data regarding the receiver of the invitation
	 * @example <caption>get the username of the member that left</caption>
	 * conversation.on("member:left", (member , event) => {
	 *      console.log(member.user.name + " left");
	 * });
	 */
	/**
	 * Conversation listening for members typing.
	 *
	 * @event Conversation#text:typing:on
	 *
	 * @property {Member} member - the member that started typing
	 * @property {Event} event - the start typing event
	 * @example <caption>get the username of the member that is typing</caption>
	 * conversation.on("text:typing:on", (data) => {
	 *      console.log(data.name + " is typing...");
	 * });
	 */
	/**
	 * Conversation listening for members stopped typing.
	 *
	 * @event Conversation#text:typing:off
	 *
	 * @property {Member} member - the member that stopped typing
	 * @property {Event} event - the stop typing event
	 * @example <caption>get the username of the member that stopped typing</caption>
	 * conversation.on("text:typing:off", (data) => {
	 *      console.log(data.name + " stopped typing...");
	 * });
	 */
	/**
	 * Conversation listening for members' seen texts.
	 *
	 * @event Conversation#text:seen
	 *
	 * @property {Member} member - the member that saw the text
	 * @property {Text} text - the text that was seen
	 * @example <caption>listen for seen text events</caption>
	 * conversation.on("text:seen", (data, text) => {
	 *      console.log(text);
	 *
	 * // Check if the event belongs to this conversation
	 *      if (text.cid === conversation.id)
	 *
	 * // Get the list of members that have seen this event
	 *      for (let member_id in text.state.seen_by) {
	 *          if (conversation.me.id !== member_id) {
	 *              console.log(conversation.members[member_id].name);
	 *          }
	 *       }
	 * });
	 */
	/**
	 * Conversation listening for members' seen images.
	 * @event Conversation#image:seen
	 *
	 * @property {Member} member - the member that saw the image
	 * @property {ImageEvent} image - the image that was seen
	 * @example <caption>listen for seen image events</caption>
	 * conversation.on("image:seen", (data, image) => {
	 *      console.log(image);
	 *
	 * // Check if the event belongs to this conversation
	 *      if (image.cid === conversation.id)
	 * // Get the list of members that have seen this event
	 *      for (let member_id in image.state.seen_by) {
	 *           if (conversation.me.id !== member_id) {
	 *               console.log(conversation.members[member_id].name);
	 *            }
	 *       }
	 * });
	 */
	/**
	 * Conversation listening for members media changes (audio, video,text)
	 *
	 * Change in media presence state. They are in the conversation with text, audio or video.
	 *
	 * @event Conversation#member:media
	 *
	 * @property {Member} member - the member object linked to this event
	 * @property {Event} event - information about media presence state
	 * @property {boolean} event.body.audio  - is audio enabled
	 * @example <caption>get every member's media change events </caption>
	 * conversation.on("member:media", (from, media) => {
	 *      console.log(from.media.audio); //true
	 * 		console.log(event.body.media); //{"audio":true}
	 * });
	 */
	sendRequest(request, callback) {
		// Add a message ID to the request and set up a listener for the reply (or error)
		request.tid = Utils.allocateUUID();
		const type = request.type;
		delete request.type;
		this.log.debug('-->', type, request);
		this.log.info('-->', type, request.tid);
		this.connection.emit(type, request);
		this.requests[request.tid] = {
			type: type,
			request: request,
			callback: callback
		};
	}

	/**
	 * Login to the cloud.
	 *x
	 * @param {string} params.token - the login token
	 */
	login(token) {

		// return a promise for the application
		return new Promise((resolve, reject) => {
			//make sure the token gets removed from localstorage
			if (typeof (Storage) !== "undefined") {
				localStorage.removeItem("NXMO_user_data");
			}
			this.sendRequest({
				type: 'session:login',
				body: {
					token: token,
					SDK_version: this.config.SDK_version,
					//device_id: //can use https://github.com/Valve/fingerprintjs2,
					OS_family: 'js',
					OS_revision: (typeof navigator !== "undefined") ? navigator.userAgent : (typeof window !== "undefined") ? window.navigator.userAgent : "Generic JS navigator"
				}
			}, (response) => {
				if (response.type === "session:success") {
					const application = new Application(this);
					const me = new User(application, {
						id: response.body.user_id,
						name: response.body.name
					});
					this.application = application;
					this.application.me = me;
					if (this.cache) this.cache.updateToken({
						token: token,
						username: response.body.name
					});
					// Retrieve the existing conversation data for this user
					application.getConversations()
						.then(() => {
							// Complete the login process
							resolve(this.application);
							if (typeof Bugsnag !== "undefined") {
								Bugsnag.user = {
									id: application.me.id
								};
							}
						}, (reason) => {
							reject(new NexmoApiError(reason));
						});
				} else {
					reject(new NexmoApiError(response));
					//TODO move this in cache module
					if (this.cache && this.cache.worker) {
						this.cache.worker.terminate();
					}
				}
			}
			);
		});
	}

	/**
	 * logout from the cloud.
	 *
	 */
	logout() {
		return new Promise((resolve, reject) => {
			const logoutRequest = () => {
				return this.sendRequest({
					type: 'session:logout',
					body: {}
				}, (response) => {
					if (response.type === "session:logged-out" || response.type === "session:terminated") {
						this.disconnect();
						delete this.application;
						delete this.cache;
						this.callbacks = {};
						this.requests = {};
						this.sessionReady = false;
						resolve(response);
					} else {
						reject(new NexmoApiError(response));
						if (typeof Bugsnag !== "undefined") Bugsnag.notifyException(Error(response.reason));
					}
				});
			}

			// prepare for logout
			if (this.application) {
				let disablePromises = [];
				for (let conversation_id in this.application.conversations) {
					disablePromises.push(this.application.conversations[conversation_id].media.disable());
				}
				Promise.all(disablePromises)
					.then(() => { }).catch((err) => { this.log.info(err); }).then(() => {
						logoutRequest();
					});
			} else {
				logoutRequest();

			}
		});
	}

	/**
	 * Disconnect from the cloud.
	 *
	 */
	disconnect() {
		return this.connection.disconnect();
	}

	/**
	 * Connect from the cloud.
	 *
	 */
	connect() {
		return this.connection.connect();
	}
}
module.exports = ConversationClient;
