/*
 * Nexmo Stitch SDK
 *  Event Object Model
 *
 * Copyright (c) Nexmo Inc. 2017
 */

const WildEmitter = require('wildemitter');
const ConversationClientError = require('../conversationClientError');

const NexmoApiError = ConversationClientError.NexmoApiError;
const NexmoClientError = ConversationClientError.NexmoClientError;

/**
 * Conversation Event Object.
 * @class Event
 */
class Event {
    constructor(conversation, params) {
        this.conversation = conversation;
        if (params) {
            for (const key in params) {
                switch (key) {
                    case "type":
                        this.type = params.type;
                        break;
                    case "cid":
                        this.cid = params.cid;
                        break;
                    case "from":
                        this.from = params.from;
                        break;
                    case "timestamp":
                        this.timestamp = params.timestamp;
                        break;
                    case "id":
                        this.id = params.id;
                        break;
                    case "state":
                        this.state = params.state;
                        break;
                    case "index":
                        this.index = params.index;
                        break;
                    case "body":
                        this.body = params.body;
                        if (this.body.user && this.body.user.user_id) {
                            this.body.user.id = this.body.user.user_id;
                            delete this.body.user.user_id;
                        }
                        break;
                }
            }
        }
        WildEmitter.mixin(Event);
    }

    /**
     * Delete the event
     * @param {number} [event_id=this.event_id] if the event id param is not present, "this" event will be default
     * @returns {Promise}
     * @private
     */
    del(event_id = this.id) {
        return new Promise((resolve, reject) => {
            this.conversation.application.session.sendRequest({
                type: 'event:delete',
                cid: this.conversation.id,
                from: this.conversation.me.id,
                body: {
                    event_id: event_id
                }
            }, (response) => {
                if (response.type === 'event:delete:success') {
                    resolve();
                } else {
                    reject(new NexmoApiError(response));
                }
            });
        });
    }

    /**
     * Mark as Delivered the event
     * @param {number} [event_id=this.event_id] if the event id is not provided, the this event will be used
     * @returns {Promise}
     * @private
     */
    delivered(event_id = this.id) {
        if (this.type !== "text" && this.type !== "image") {
            this.type = "event";
        }
        return new Promise((resolve, reject) => {
            if (this.conversation.me.id === this.from) {
                reject(new NexmoClientError("error:delivered:own-message"));
            } else if (this.state && this.state.delivered_to && this.state.delivered_to[this.conversation.me.id]) {
                reject(new NexmoClientError("error:already-delivered"));
            } else {
                const params = {
                    event_id: event_id
                };
                this.conversation.application.session.sendRequest({
                    type: this.type + ':delivered',
                    from: this.conversation.me.id,
                    cid: this.conversation.id,
                    body: params
                }, (response) => {
                    if (response.type === this.type + ':delivered:success') {
                        resolve();
                    } else {
                        reject(new NexmoApiError(response));
                    }
                });
                resolve();
            }
        });
    }

    /**
     * Mark as Seen the event
     * @param {number} [event_id=this.event_id] if the event id is not provided, the this event will be used
     * @returns {Promise}
     * @private
     */
    seen(event_id = this.id) {
        if (this.type !== "text" && this.type !== "image") {
            this.type = "event";
        }
        return new Promise((resolve, reject) => {
            if (this.conversation.me.id === this.from) {
                reject(new NexmoClientError("error:seen:own-message"));
            } else if (this.state && this.state.seen_by && this.state.seen_by[this.conversation.me.id]) {
                reject(new NexmoClientError("error:already-seen"));
            } else {
                const params = {
                    event_id: event_id
                };
                this.conversation.application.session.sendRequest({
                    type: this.type + ':seen',
                    from: this.conversation.me.id,
                    cid: this.conversation.id,
                    body: params
                }, (response) => {
                    if (response.type === this.type + ':seen:success') {
                        resolve();
                    } else {
                        reject(new NexmoApiError(response));
                    }
                });
            }
        });
    }
}
module.exports = Event;
