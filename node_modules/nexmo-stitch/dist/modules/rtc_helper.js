/*
 * Nexmo Stitch SDK
 *  RtcHelper Object Model
 *
 * Copyright (c) Nexmo Inc. 2017
 */

// Conversation Client Error
const ConversationClientError = require('../conversationClientError');
const adapter = require('webrtc-adapter');
const browserDetect = require('detect-browser');
const logger = require('loglevel');
const ChromeHelper = require('./chrome_helper');

const NexmoClientError = ConversationClientError.NexmoClientError;
const browser = browserDetect.detect();

/**
 * A single RtcHelper Object.
 * @class RtcHelper
 * @ignore
 */
class RtcHelper {
    constructor(screenShareExtensionId) {
        this.log = logger.getLogger(this.constructor.name);
        this.chromeHelper = new ChromeHelper(screenShareExtensionId);
    }
    getUserAudio() {
        return navigator.mediaDevices.getUserMedia({
            video: false,
            audio: true
        });
    }

    getUserVideo(videoConstraints = true, audioConstraints = true) {
        let constraintsToUse = {
            video: videoConstraints,
            audio: audioConstraints
        };

        return navigator.mediaDevices.getUserMedia(constraintsToUse);
    }

    getUserScreen(sources) {
        return this.checkBrowserRunOnHttps()
            .then(() => {
                return this.checkChromeExtensionIsInstalled();
            })
            .then(() => {
                return this.getShareScreenStream(sources);
            });
    }

    createRTCPeerConnection(config, constraints, clientId) {
        constraints.optional.push({ clientId: clientId });
        return new RTCPeerConnection(config, constraints);
    }

    checkBrowserRunOnHttps() {
        return new Promise((resolve, reject) => {
            if (this._getWindowLocationProtocol() !== 'https:') {
                reject(new NexmoClientError('error:media:unsupported-browser'));
            }
            resolve();
        });
    }

    checkChromeExtensionIsInstalled() {
        return new Promise((resolve, reject) => {
            if (this._getBrowserName() === 'chrome') {
                this.chromeHelper.checkScreenShareInstalled()
                    .then(() => resolve())
                    .catch((err) => reject(err));
            } else {
                // Firefox or others, no need for the extension (but this doesn't mean it will work)
                return resolve();
            }

        });
    }

    getShareScreenStream(sources) {
        switch (this._getBrowserName()) {
            case 'chrome':
                return this.chromeGetShareScreenStream(sources);
            case 'firefox':
                return this.fireFoxGetShareScreenStream();
            default:
                return Promise.reject(new NexmoClientError('error:media:unsupported-browser'));
        }
    }

    fireFoxGetShareScreenStream() {
        let constraints = {
            video: {
                mozMediaSource: 'screen',
                mediaSource: 'screen'
            },
            audio: false
        };

        return new Promise((resolve, reject) => {
            navigator.mediaDevices.getUserMedia(constraints).then((stream) => {
                resolve(stream);
            }).catch((e) => {
                reject(e);
            });
        });
    }

    chromeGetShareScreenStream(sources) {
        return new Promise((resolve, reject) => {
            this.chromeHelper.getScreenShare(sources)
                .then((streamId) => {
                    const constraints = {
                        audio: false,
                        video: {
                            mandatory: {
                                chromeMediaSource: 'desktop',
                                maxWidth: window.screen.width,
                                maxHeight: window.screen.height,
                                maxFrameRate: 15,
                                chromeMediaSourceId: streamId
                            },
                            optional: []
                        }
                    };
                    return navigator.mediaDevices.getUserMedia(constraints)
                        .then((stream) => resolve(stream))
                        .catch(err => reject(err));
                })
                .catch(err => reject(err));
        });
    }

    firefoxGetShareScreenStream() {
        Promise.reject(new NexmoClientError('Not support'));
    }

    _playAudioStream(stream) {
        const audio = new Audio();
        audio.srcObject = stream;
        audio.autoplay = true;
        return audio;
    }

    _getWindowLocationProtocol() {
        return window.location.protocol;
    }

    _getBrowserName() {
        return browser.name;
    }

    isNode() {
        return browser.name === 'node';
    }
}
module.exports = RtcHelper;
