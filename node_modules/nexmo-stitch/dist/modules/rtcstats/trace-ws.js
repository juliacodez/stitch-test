var PROTOCOL_VERSION = '1.0';
var MAX_BUFFER_LENGTH = 50;
var MAX_RECONNECT_RETRIES = 5;
var RECONNECT_RETRY_TIMEOUT = 5000;
module.exports = function() {
    var buffer = [];
    var retObj = {};
    var connection;
    var rtcstatsUri;
    var traceEnabled = false;
    var logger = {
        log: function() {},
    };
    var reconnectRetries = 0;

    retObj.reset = function(options) {
        var self = this;

        if (options && options.traceEnabled) {
            traceEnabled = options.traceEnabled;
        } else {
            traceEnabled = false;
        }

        if (options && options.logger) {
            logger = options.logger;
        }

        if (options && options.rtcstatsUri) {
            rtcstatsUri = options.rtcstatsUri;
        }

        self.reconnect();
    };

    retObj.reconnect = function() {
        var self = this;

        logger.log('TRACE-WS reconnect', connection ? connection.readyState : 'no connection');

        if (connection && connection.readyState !== WebSocket.CLOSED) {
            connection.onclose = undefined;
            connection.onerror = undefined;
            connection.close();
        }

        connection = undefined;

        if (reconnectRetries > MAX_RECONNECT_RETRIES) {
            return;
        }

        reconnectRetries++;

        if (rtcstatsUri && traceEnabled) {
            connection = new WebSocket(rtcstatsUri, PROTOCOL_VERSION);
            connection.onerror = function(e) {
                logger.log('TRACE-WS onerror', e);
            };

            connection.onopen = function() {
                reconnectRetries = 0;
                logger.log('TRACE-WS onopen', buffer.length);
                while (buffer.length) {
                    connection.send(JSON.stringify(buffer.shift()));
                }
            };

            connection.onclose = function(event) {
                logger.log('TRACE-WS onclose', event);
                setTimeout(function () {
                    self.reconnect();
                }, RECONNECT_RETRY_TIMEOUT);
            };
        }
    };

    retObj.trace = function() {
        if (!traceEnabled) {
            return;
        }

        var args = Array.prototype.slice.call(arguments);
        args.push(new Date().getTime());
        if (connection && connection.readyState === WebSocket.OPEN) {
            connection.send(JSON.stringify(args));
        } else {
            if (buffer.length <= MAX_BUFFER_LENGTH) {
                buffer.push(args);
            }
        }
    };

    return retObj;
};
