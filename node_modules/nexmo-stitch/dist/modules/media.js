/*
 * Nexmo Stitch SDK
 *  Media Object Model
 *
 * Copyright (c) Nexmo Inc. 2017-2018
 */

const ConversationClientError = require('../conversationClientError');
const RtcHelper = require('./rtc_helper');
const logger = require('loglevel');
const Utils = require('../utils');

let wsConnection;

function setWsConnection(rtcHelper) {
    if (!rtcHelper.isNode()) {
        wsConnection = require('./rtcstats/trace-ws')();
        require('./rtcstats/rtcstats')(
            wsConnection.trace,
            1000, // interval at which getStats will be polled,
            [''] // RTCPeerConnection prefixes to wrap.
        );
    } else {
        wsConnection = {
            reset: () => { }
        }
    }
}

const NexmoApiError = ConversationClientError.NexmoApiError;
const NexmoClientError = ConversationClientError.NexmoClientError;

/**
 * WebRTC Media class
 * @class Media
 */

class Media {
    constructor(conversation) {

        this.log = logger.getLogger("Media");
        if (conversation) {
            this.application = conversation.application;
            this.application.activeStream = {};
            this.application.activeStreams = [];
            this.eventsQueue = [];
            this.extensionId = this.application.session.config.screenshareExtensionId;
            this.parentConversation = conversation;
            this.parentConversation.remoteMembers = [];
            this.parentConversation.rtcObjects = {};
            this.streamIndex = 0;
            this.rtcHelper = new RtcHelper(this.extensionId);
            setWsConnection(this.rtcHelper);
        } else {
            this.log.warn('No conversation object in Media');
        }
        this.log_rtcstats = logger.getLogger("RTCStats");
        wsConnection.reset({
            traceEnabled: this.application.session.config.rtcstarts_enables,
            rtcstatsUri: this.application.session.config.rtcstarts_url,
            logger: {
                log: this.log_rtcstats.debug
            }
        });
    }

    _handleVideo(params) {
        return Promise.resolve()
            .then(() => {
                if (params.video) {
                    let direction = 'none';
                    let name = 'video';
                    let videoConstraints;
                    let audioConstraints;
                    if (params.video === Object(params.video)) {
                        direction = params.video.direction;
                        name = params.video.name || 'video';
                        videoConstraints = params.video.constraints;

                    } else {
                        direction = params.video;
                    }
                    if (params.audio) {
                        audioConstraints = params.audio.constraints;
                    }
                    switch (direction) {
                        case 'both':
                        case 'send_only':
                        case true:
                            return this.rtcHelper.getUserVideo(videoConstraints, audioConstraints).then((localStream) => {
                                return this._handleVideoSend(localStream, direction === 'send_only', 'video', name, params);
                            });
                        case 'receive_only':
                            this.log.debug('video - receive_only not implemented yet');
                            return Promise.reject(new NexmoApiError('Not implemented yet'));
                        case 'none':
                            break;
                        default:
                            if (direction === false) {
                                let rtcObjectWithType = this._findRtcObjectByType('video');
                                if (rtcObjectWithType) {
                                    return this._disableLeg(rtcObjectWithType.id);
                                }
                            }
                            break;
                    }
                } else {
                    Promise.resolve();
                }
            }).then(() => {
                if (params.screenshare) {
                    let direction = false;
                    let name = 'screenshare';
                    let sources = ['screen', 'window', 'tab'];
                    if (params.screenshare === Object(params.screenshare)) {
                        direction = params.screenshare.direction;
                        name = params.screenshare.name || 'screenshare';
                        sources = params.screenshare.sources || sources;
                    } else {
                        direction = params.screenshare;
                    }
                    switch (direction) {
                        case 'send_only':
                        case true:
                            return this.rtcHelper.getUserScreen(sources).then((localStream) => {
                                return this._handleVideoSend(localStream, true, 'screenshare', name, params);
                            });
                        case 'none':
                            break;
                        default:
                            if (direction === false) {
                                let rtcObjectWithType = this._findRtcObjectByType('screenshare');
                                if (rtcObjectWithType) {
                                    return this._disableLeg(rtcObjectWithType.id);
                                }
                            }
                            break;
                    }
                } else {
                    Promise.resolve();
                }
            })
    }

    _emitEventsByRtcId(rtc_id) {
        this.eventsQueue.filter((event) => event.id === rtc_id)
            .forEach((event) => {
                event.func();
                event.ran = true;
            });
        this.eventsQueue = this.eventsQueue.filter((event) => event.ran === false);
    }

    _runWhenLegInitialized(rtc_id, func) {
        if (this.parentConversation.rtcObjects[rtc_id]) {
            func();
        } else {
            this.eventsQueue.push({
                id: rtc_id,
                func: func,
                ran: false
            })
        }
    }

    _handleVideoSend(localStream, isSendOnly, type, name, params) {
        const clientId = Utils.allocateUUID();
        const pc = this.rtcHelper.createRTCPeerConnection({
            'iceServers': this.application.session.config.iceServers,
            'iceTransportPolicy': 'all',
            'bundlePolicy': 'balanced',
            'rtcpMuxPolicy': 'require',
            'iceCandidatePoolSize': '0'
        }, {
                optional: [{
                    'DtlsSrtpKeyAgreement': 'true'
                }]
            }, clientId);

        pc.trace('conversation_id', this.parentConversation.id);
        pc.trace('member_id', this.parentConversation.me.id);

        // We want to be able to handle these events, for this  member, before they get propagated out
        if (!this.listeningToRtcEvent) {
            this.parentConversation.on('rtc:answer', 'media_module', (event) => {
                let setRemoveDescriptionFunc =
                    () => {
                        this.parentConversation.rtcObjects[event.body.rtc_id].pc.setRemoteDescription(new RTCSessionDescription({
                            type: 'answer',
                            sdp: event.body.answer
                        })).then(() => {
                            this.log.debug('remote description is set');
                        }).catch((e) => {
                            this.log.warn('set remote description failed with error', e);
                        });
                    };

                this._runWhenLegInitialized(event.body.rtc_id, setRemoveDescriptionFunc)
            });
        }

        if (!isSendOnly && !this.listeningToRtcEvent) {
            this.parentConversation.on('rtc:offer', 'media_module', (event) => {
                let handleOfferFunc = () => {
                    this._handleNewOffer(params, event);
                };
                this._runWhenLegInitialized(event.body.leg_id, handleOfferFunc);
            });

            this.parentConversation.on('rtc:terminate', 'media_module', (event) => {
                this._handleParticipantRtcTerminate(event);
            })


            this.parentConversation.on('member:left', (member_left) => {
                this._handleMemberLeft(member_left);
            })
        }

        this.listeningToRtcEvent = true;
        pc.ontrack = (evt) => {
            this.log.debug('ontrack');
            this.application.activeStreams.push(evt.streams[0]);
        };

        pc.addStream(localStream);
        let index = this.streamIndex;
        this.streamIndex++;
        this.parentConversation.me.emit("media:stream:on", {
            type,
            name: name,
            index: index,
            localStream
        });
        const p = new Promise((resolve, reject) => {
            pc.createOffer()
                .then((desc) => {
                    return pc.setLocalDescription(desc);
                })
                .then(() => {
                    const direction = isSendOnly ? 'send_only' : 'both';
                    const event_to_emit = {
                        type: 'rtc:new',
                        cid: this.parentConversation.id,
                        from: this.parentConversation.me.id,
                        body: {
                            offer: {
                                sdp: pc.localDescription.sdp
                            },
                            video: {
                                direction,
                                name
                            }
                        }
                    };
                    if (params && params.label) {
                        event_to_emit.label = params.label;
                    }
                    this.application.session.sendRequest(event_to_emit, (response) => {
                        if (response.type === 'rtc:new:success') {
                            const rtc_id = response.body.rtc_id;
                            this.parentConversation.rtcObjects[rtc_id] = {
                                id: rtc_id,
                                pc: pc,
                                localStream: localStream,
                                type: type,
                                streamIndex: index
                            };
                            this._emitEventsByRtcId(rtc_id);
                            pc.trace('rtc_id', rtc_id);
                            if (type === 'screenshare') {
                                localStream.getVideoTracks()[0].onended = () => {
                                    this._disableLeg(rtc_id)
                                        .then(() => {
                                            this.parentConversation.me.emit("media:stream:off", index);
                                        })
                                        .catch(() => {
                                            this.parentConversation.me.emit("media:stream:off", index);
                                        })
                                };
                            }
                            resolve(rtc_id);
                        } else {
                            reject(new NexmoApiError(response));
                        }
                    });
                }).catch((e) => {
                    reject(new NexmoApiError(e));
                })
        });
        const promisesArray = [];
        pc.onicecandidate = (event) => {
            p.then((rtc_id) => {
                const body = {};
                this._onIceCandidate(promisesArray, event, body, rtc_id);
            })
        };

        pc.oniceconnectionstatechange = (status) => {
            switch (pc.iceConnectionState) {
                //https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState
                case 'disconnected':
                    this.log.warn('One or more transports is disconnected', pc.iceConnectionState);
                    break;
                case 'failed':
                    this.log.warn('One or more transports has terminated unexpectedly or in an error', status);
                    break;
                default:
                    this.log.debug('The ice connection status changed', pc.iceConnectionState);
                    break;
            }
        }
        pc.onicegatheringstatechange = () => {
            switch (pc.iceGatheringState) {
                case 'new':
                    this.log.debug('ice gathering new');
                    break;
                case 'complete':
                    this.log.debug('ice gathering complete');
                    break;
                case 'gathering':
                    this.log.debug('ice gathering gathering');
                    break;
            }
        }
        //on member delete (our this)
        //terminate media
        this.parentConversation.on('member:left', 'media_module', (member) => {
            if (member.user.id === this.application.me.id) {
                this.disable();
            }
        });
        this.log.debug('sending local stream');

        return p;
    }

    _sendIceRequest(body, rtc_id) {

        return new Promise((resolve, reject) => {
            const event_to_emit = {
                type: 'rtc:ice',
                cid: this.parentConversation.id,
                from: this.parentConversation.me.id,
                rtc_id: rtc_id,
                body: body
            }

            this.application.session.sendRequest(event_to_emit, (response) => {
                if (response.type === 'rtc:ice:success') {
                    resolve();
                } else {
                    reject(new NexmoApiError(response));
                }
            });
        })
    }

    _onIceCandidate(promiseArray, event, body, rtc_id) {

        const bodyToSend = body;

        if (event.candidate) {
            bodyToSend.candidates = event.candidate;
            this.log.debug('sending trickle candidates: ', bodyToSend);
            promiseArray.push(this._sendIceRequest(bodyToSend, rtc_id))
        } else {
            bodyToSend.candidates = {
                completed: true
            };
            return Promise.all(promiseArray)
                .then(this._sendIceRequest(bodyToSend, rtc_id))
                .then(() => {
                    this.log.debug('successfully sent trickle candidates', bodyToSend);
                })
                .catch(() => {
                    this.log.error('failed to sent trickle candidates', bodyToSend);
                });
        }
    }

    _handleNewOffer(params, event) {


        const remoteMemberObject = {
            remote_member_id: event.body.member_id,
            remote_leg_id: event.body.member_leg_id,
            local_leg_id: event.body.leg_id,
            name: event.body.name,
            streamIndex: this.streamIndex
        };
        this.streamIndex++;

        for (let member_id in this.parentConversation.members) {
            if (member_id === event.body.member_id) {
                remoteMemberObject.remote_member = this.parentConversation.members[member_id];
            }
        }

        this.parentConversation.remoteMembers.push(remoteMemberObject);
        this.log.debug('handle rtc:offer for member ' + remoteMemberObject.remote_member_id);

        const clientId = Utils.allocateUUID();
        remoteMemberObject.pc = this.rtcHelper.createRTCPeerConnection({
            'iceServers': this.application.session.config.iceServers,
            'iceTransportPolicy': 'all',
            'bundlePolicy': 'balanced',
            'rtcpMuxPolicy': 'require',
            'iceCandidatePoolSize': '0'
        }, {
                optional: [{
                    'DtlsSrtpKeyAgreement': 'true'
                }]
            }, clientId);

        remoteMemberObject.pc.trace('conversation_id', this.parentConversation.id);
        remoteMemberObject.pc.trace('member_id', this.parentConversation.me.id);
        remoteMemberObject.pc.trace('rtc_id', remoteMemberObject.local_leg_id);
        remoteMemberObject.pc.trace('other_member_id', remoteMemberObject.remote_member_id);

        remoteMemberObject.pc.ontrack = (evt) => {
            if (remoteMemberObject.stream !== evt.streams[0]) {
                remoteMemberObject.stream = evt.streams[0];
                remoteMemberObject.remote_member.emit("media:stream:on", {
                    index: remoteMemberObject.streamIndex,
                    remote_member_id: remoteMemberObject.remote_member_id,
                    name: remoteMemberObject.name,
                    stream: remoteMemberObject.stream
                });
            }
        };

        let p = Promise.resolve();
        const promisesArray = [];
        remoteMemberObject.pc.onicecandidate = (event) => {

            p = p.then(() => {
                const body = {
                    other_member_id: remoteMemberObject.remote_member_id,
                    leg_id: remoteMemberObject.remote_leg_id
                };
                this._onIceCandidate(promisesArray, event, body, remoteMemberObject.local_leg_id);
            })
        }

        remoteMemberObject.pc.oniceconnectionstatechange = (status) => {
            switch (remoteMemberObject.pc.iceConnectionState) {
                //https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState
                case 'disconnected':
                    this.log.warn('One or more transports is disconnected', remoteMemberObject.pc.iceConnectionState);
                    break;
                case 'failed':
                    this.log.warn('transports has terminated or failed for member ' + event.body.member_id, status);
                    break;
                default:
                    this.log.debug('The ice connection status changed for member ' + event.body.member_id, remoteMemberObject.pc.iceConnectionState);
                    break;
            }
        };
        remoteMemberObject.pc.onicegatheringstatechange = () => {
            switch (remoteMemberObject.pc.iceGatheringState) {
                case 'new':
                    this.log.debug('ice gathering new for member ' + event.body.member_id);
                    break;
                case 'complete':
                    this.log.debug('ice gathering complete for member ' + event.body.member_id);
                    break;
                case 'gathering':
                    this.log.debug('ice gathering gathering for member ' + event.body.member_id);
                    break;
            }
        };
        const rtcAnswerFunc = () => {
            remoteMemberObject.pc.setRemoteDescription(new RTCSessionDescription({
                type: 'offer',
                sdp: event.body.sdp
            }))
                .then(() => {
                    return remoteMemberObject.pc.createAnswer()
                })
                .then((answer) => {
                    return remoteMemberObject.pc.setLocalDescription(answer);
                })
                .then(() => {
                    const event_to_emit = {
                        type: 'rtc:answer',
                        cid: this.parentConversation.id,
                        rtc_id: remoteMemberObject.local_leg_id,
                        from: this.parentConversation.me.id,
                        body: {
                            other_member_id: remoteMemberObject.remote_member_id,
                            answer: remoteMemberObject.pc.localDescription.sdp,
                            leg_id: remoteMemberObject.remote_leg_id
                        }
                    };

                    if (params && params.label) {
                        event_to_emit.label = params.label;
                    }

                    this.application.session.sendRequest(event_to_emit,
                        (response) => {
                            if (response.type === 'rtc:answer:success') {
                                this.log.debug('successfully set answer for member ' + remoteMemberObject.remote_member_id);
                            } else {
                                this.log.error(response.type + ': failed to set answer for member ' + remoteMemberObject.remote_member_id);
                            }
                        });
                });
        }

        this._runWhenLegInitialized(remoteMemberObject.local_leg_id, rtcAnswerFunc);
    }

    _handleMemberLeft(member_left) {
        const member_id = member_left.id;
        const member_legs = this.parentConversation.remoteMembers.filter((member) => {
            return member.remote_member_id === member_id
        });
        member_legs.forEach((member_leg) => {
            this._handleParticipantRtcTerminate({ body: { rtc_id: member_leg.remote_leg_id } });
        })
    }

    _handleParticipantRtcTerminate(event) {
        const member = this.parentConversation.remoteMembers.find((member) => {
            return member.remote_leg_id === event.body.rtc_id
        });

        if (!member) {
            this.log.error('rtc:terminate was sent with invalid member id');
            return;
        }

        this.parentConversation.remoteMembers = this.parentConversation.remoteMembers.filter((remoteMember) => {
            return remoteMember.remote_leg_id !== event.body.rtc_id
        });
        this._deleteMemberMedia(member);
        member.remote_member.emit("media:stream:off", {
            remote_member_id: member.remote_member_id,
            index: member.streamIndex
        });
    }

    _deleteMemberMedia(member) {
        this._closeStream(member.stream);
        member.pc.close();
    }

    _findRtcObjectByType(type) {
        return Object.values(this.parentConversation.rtcObjects)
            .find((rtcObject) => rtcObject.type === type);
    }

    update(params) {
        return new Promise((resolve, reject) => {
            this._validateUpdateParams(params)
                .then(() => {
                    if (params.video) {
                        const rtcObject = this._findRtcObjectByType('video');
                        if ((rtcObject && params.video.direction) || (!rtcObject && !params.video.direction)) {
                            return reject(new NexmoClientError('error:media:update:invalid'));
                        }
                    } else if (params.screenshare) {
                        const rtcObject = this._findRtcObjectByType('screenshare');
                        if ((rtcObject && params.screenshare.direction) || (!rtcObject && !params.screenshare.direction)) {
                            return reject(new NexmoClientError('error:media:update:invalid'));
                        }
                    }
                    return this._handleVideo(params).then(resolve).catch(reject);
                }).catch(err => reject(err));
        })
    }

    _validateUpdateParams(params) {
        return new Promise((resolve, reject) => {
            if (params && (params.video || params.screenshare)) {
                if (params.video && params.screenshare) {
                    return reject(new NexmoClientError('error:media:update:streams'));
                }
            } else {
                return reject(new NexmoClientError('error:media:update:unsupported'));
            }
            resolve();
        });
    }

    _closeStream(stream) {
        stream.getTracks().forEach((track) => {
            track.stop();
        });
    }

    _disableActiveStream() {
        if (!this.application.activeStream || !this.application.activeStream.rtc_id) {
            return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
            this.application.session.sendRequest({
                type: 'rtc:terminate',
                cid: this.parentConversation.id,
                from: this.parentConversation.me.id,
                rtc_id: this.application.activeStream.rtc_id
            }, (response) => {
                if (response.type === 'rtc:terminate:success') {
                    resolve(response.type);
                } else {
                    //make sure we have cleaned the objects
                    reject(new NexmoApiError(response));
                }
            });
        });
    }

    _cleanConversationProperties() {
        return Promise.resolve().then(() => {
            if (this.parentConversation.pc) {
                this.parentConversation.pc.close();
            }
            if (this.parentConversation.remoteMembers) {
                this.parentConversation.remoteMembers.forEach((member) => {
                    member.remote_member.emit('media:stream:off', {
                        remote_member_id: member.remote_member_id,
                        index: member.streamIndex
                    });
                    this._deleteMemberMedia(member);
                });
            }

            // stop active stream
            if (this.application.localStream) {
                this._closeStream(this.application.localStream);
            }
            if (this.application.activeStream && this.application.activeStream.stream) {
                this._closeStream(this.application.activeStream.stream);
            }
            if (this.parentConversation.localStream) {
                this._closeStream(this.parentConversation.localStream);
            }
            delete this.parentConversation.pc;
            delete this.parentConversation.localStream;
            this.application.activeStream = {};
            this.parentConversation.remoteMembers = [];
            this.parentConversation.releaseGroup('media_module');
        });
    }

    _disableLeg(leg_id) {
        const csRequestPromise = new Promise((resolve, reject) => {
            this.application.session.sendRequest({
                type: 'rtc:terminate',
                cid: this.parentConversation.id,
                from: this.parentConversation.me.id,
                rtc_id: leg_id
            }, (response) => {
                if (response.type === 'rtc:terminate:success') {
                    resolve(response.type);
                } else {
                    //make sure we have cleaned the objects
                    reject(new NexmoApiError(response));
                }
            });
        });
        const closeResourcesPromise = Promise.resolve().then(() => {
            if (this.parentConversation.rtcObjects[leg_id].pc) this.parentConversation.rtcObjects[leg_id].pc.close();
            if (this.parentConversation.rtcObjects[leg_id].localStream) {
                this._closeStream(this.parentConversation.rtcObjects[leg_id].localStream);
            }
        });
        return Promise.all([csRequestPromise, closeResourcesPromise]).then(() => {
            this.parentConversation.me.emit("media:stream:off", this.parentConversation.rtcObjects[leg_id].streamIndex);
            delete this.parentConversation.rtcObjects[leg_id];
            return Promise.resolve('rtc:terminate:success')
        }).catch((error) => {
            return Promise.reject(error);
        });
    }

    _sendMuteRequest(rtc_id, type, callback) {
        let params = {
            rtc_id: rtc_id
        };
        let request = {
            type: type,
            cid: this.parentConversation.id,
            to: this.parentConversation.me.id,
            from: this.parentConversation.me.id,
            body: params
        };
        this.application.session.sendRequest(request, callback);
    }

    _enableMediaTracks(tracks, enabled) {
        tracks.forEach((mediaTrack) => {
            mediaTrack.enabled = enabled;
        });
    }

    /**
     * Mute our member
     *
     * @param {int} [streamIndex] stream id to set
     * @param {Boolean} [mute] true for mute, false for unmute
     * @param {Boolean} [audio=true] true for audio stream
     * @param {Boolean} [video=false] true for video stream
     * @example <caption>Mute audio stream</caption>
     * media.mute(true, true, false)
     * @example <caption>Mute audio and video streams</caption>
     * media.mute(true, true, true)
     * @example <caption>Mute only video</caption>
     * media.mute(true, false, true)
     * @private
     */
    mute(mute, audio = true, video = false, streamIndex) {

        let tracks = [];

        const state = mute ? 'on' : 'off';
        const audioType = 'audio:mute:' + state;
        const videoType = 'video:mute:' + state;
        const audioSuccess = audioType + ':success';
        const videoSuccess = videoType + ':success';

        let promises = [];

        const self = this;
        if (audio) {
            let rtcObjects = [];
            if (streamIndex !== undefined) {
                const rtcObject = Object.values(this.parentConversation.rtcObjects).find((rtcObj => rtcObj.streamIndex === streamIndex));
                if (rtcObject) {
                    tracks = tracks.concat(rtcObject.localStream.getAudioTracks());
                    rtcObjects.push(rtcObject);
                }
            } else {
                rtcObjects = rtcObjects.concat(Object.values(this.parentConversation.rtcObjects));
            }

            rtcObjects.forEach((rtcObject) => {
                let audioPromise = new Promise((resolve, reject) => {
                    this._sendMuteRequest(rtcObject.id, audioType, (response) => {
                        if (response.type === audioSuccess) {
                            resolve(response.body);
                        } else {
                            reject(new NexmoApiError(response));
                        }
                    })
                });
                promises.push(audioPromise);
            });

            if (this.application.activeStream && this.application.activeStream.rtc_id) {
                const rtc_id = this.application.activeStream.rtc_id;
                tracks = tracks.concat(this.parentConversation.localStream.getAudioTracks());
                let audioPromise = new Promise((resolve, reject) => {
                    this._sendMuteRequest(rtc_id, audioType, (response) => {
                        if (response.type === audioSuccess) {
                            resolve(response.body);
                        } else {
                            reject(new NexmoApiError(response));
                        }
                    })
                });
                promises.push(audioPromise);
            }
        }

        if (video) {
            let rtcObjects = [];
            if (streamIndex !== undefined) {
                const rtcObject = Object.values(this.parentConversation.rtcObjects).find((rtcObj => rtcObj.streamIndex === streamIndex));
                if (rtcObject) {
                    tracks = tracks.concat(rtcObject.localStream.getVideoTracks());
                    rtcObjects.push(rtcObject);
                }
            } else {
                rtcObjects = rtcObjects.concat(Object.values(this.parentConversation.rtcObjects));
            }
            rtcObjects.forEach((rtcObject) => {
                let videoPromise = new Promise((resolve, reject) => {
                    this._sendMuteRequest(rtcObject.id, videoType, (response) => {
                        if (response.type === videoSuccess) {
                            resolve(response.body);
                        } else {
                            reject(new NexmoApiError(response));
                        }
                    })
                });
                promises.push(videoPromise);
            });
        }

        this._enableMediaTracks(tracks, !mute);
        return Promise.all(promises).catch(function(response) {
            self._enableMediaTracks(tracks, mute);
            throw response;
        });
    }

    /**
     * Earmuff our member
     *
     * @param {Boolean} [params]
     *
     * @returns {Promise}
     * @private
     */
    earmuff(earmuff) {
        return new Promise((resolve, reject) => {
            if (this.me === null) {
                reject(new NexmoClientError("error:self"));
            } else {
                let type = 'audio:earmuff:off';
                if (earmuff) {
                    type = 'audio:earmuff:on';
                }
                this.application.session.sendRequest({
                    type: type,
                    cid: this.parentConversation.id,
                    to: this.parentConversation.me.id
                }, (response) => {
                    const onoff = (earmuff) ? 'on' : 'off';
                    if (response.type === 'audio:earmuff:' + onoff + ':success') {
                        resolve(response.body);
                    } else {
                        reject(new NexmoApiError(response));
                    }
                });
            }
        });
    }

    /**
       * Enable media participation in the conversation for this application (requires WebRTC)
       * @param {object} params - rtc params
       * @param {string} params.label - Label is an application defined tag, eg. ‘fullscreen’
       * @param {object} [params.audio=true] - audio enablement mode. possible values "both", "send_only", "receive_only", "none", true or false
       * * <!-- the following line should be added when deploying video to prod.
       * @param {object} [params.video=false] - video enablement mode. possible values "both", "send_only", "receive_only", "none", true or false
       * @param {object} [params.video={direction: 'some_direction', constraints: constraints_object}] - video enablement mode.
       * possible values for direction "both", "send_only", "receive_only", "none", true or false
       * @param {object} [params.screenshare=false] -screen sharing enablement mode. possible values "send_only", "none", true or false
       * @param {object} [params.screenshare={direction: 'some_direction'}] - screen sharing enablement mode. possible values for direction "send_only", "none", true or false  -->
       * @returns {Promise<MediaStream>}
       * @example
       * Enable media in this conversation
       * function enable() {
       *   conversation.media.enable()
       *      .then((stream) => {
                  const media = document.createElement("audio");
                  const source = document.createElement("source");
                  const media_div = document.createElement("div");

                  media.appendChild(source);
                  media_div.appendChild(media);
                  document.insertBefore(media_div);

                  // Older browsers may not have srcObject
                  if ("srcObject" in media) {
                      media.srcObject = stream;
                  } else {
                      // Avoid using this in new browsers, as it is going away.
                      media.src = window.URL.createObjectURL(stream);
                  }

                  media.onloadedmetadata = (e) => {
                      media.play();
                  };
          *
       * 		 }).catch((error) => {
       *           console.log(error);
       *       });
       * }
       *
       *
       *
       **/
    enable(params) {
        return new Promise((resolve, reject) => {
            const onClientError = (error) => {
                this.log.error(error);
                reject(new NexmoClientError(error));
            }
            if (this.parentConversation.me === null) {
                reject(new NexmoClientError('error:self'));
            } else {
                if (params && this.parentConversation.is_video_conversation) {
                    return this._handleVideo(params).catch(reject)
                        .then(() => {
                            const types = ['video', 'screenshare'];
                            let disablePromises = [];
                            types.forEach((type) => {
                                if (!params[type]) {
                                    let rtcObjectWithType = this._findRtcObjectByType(type);
                                    if (rtcObjectWithType) {
                                        disablePromises.push(this._disableLeg(rtcObjectWithType.id));
                                    }
                                }
                            });
                            return Promise.all(disablePromises)
                                .then(resolve)
                                .catch(reject);
                        })
                }
                if (this.application.activeStream.rtc_id) {
                    onClientError(new NexmoClientError('error:media:already-connecting'));
                }
                this.application.activeStream = {
                    conversation: this.parentConversation
                };
                this.rtcHelper.getUserAudio()
                    .then((localStream) => {
                        const clientId = Utils.allocateUUID();
                        const pc_config = {
                            'iceTransportPolicy': 'all',
                            'bundlePolicy': 'balanced',
                            'rtcpMuxPolicy': 'require',
                            'iceCandidatePoolSize': '0'
                        };
                        if (this.application.session.config.iceServers) {
                            pc_config.iceServers = this.application.session.config.iceServers
                        }
                        const pc = this.rtcHelper.createRTCPeerConnection(pc_config, {
                            optional: [{
                                'DtlsSrtpKeyAgreement': 'true'
                            }]
                        }, clientId);

                        pc.trace('conversation_id', this.parentConversation.id);
                        pc.trace('member_id', this.parentConversation.me.id);

                        this.parentConversation.pc = pc;
                        this.parentConversation.localStream = localStream;
                        pc.ontrack = (evt) => {
                            this.application.activeStream.stream = evt.streams[0];
                            resolve(evt.streams[0]);
                        };
                        pc.addStream(localStream);

                        pc.onnegotiationneeded = () => {
                            pc.createOffer().then((offer) => {
                                return pc.setLocalDescription(offer);
                            }).then(() => {

                                // Send the offer to the remote peer through the signaling server
                            }).catch(onClientError);
                        }

                        pc.oniceconnectionstatechange = (status) => {
                            switch (pc.iceConnectionState) {
                                //https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState
                                case 'disconnected':
                                    this.log.warn('One or more transports is disconnected', pc.iceConnectionState);
                                    break;
                                case 'failed':
                                    onClientError(status);
                                    this.log.warn('One or more transports has terminated unexpectedly or in an error', status);
                                    break;
                                default:
                                    this.log.debug('The ice connection status changed', pc.iceConnectionState);
                                    break;
                            }
                        }

                        pc.onicegatheringstatechange = () => {
                            switch (pc.iceGatheringState) {
                                case 'new':
                                    this.log.debug('ice gathering new');
                                    break;
                                case 'complete':
                                    this.log.debug('ice gathering complete');
                                    const event_to_emit = {
                                        type: 'rtc:new',
                                        cid: this.parentConversation.id,
                                        from: this.parentConversation.me.id,
                                        body: {
                                            offer: this.parentConversation.pc.localDescription
                                        }
                                    }
                                    if (params && params.label) {
                                        event_to_emit.label = params.label;
                                    }
                                    this.application.session.sendRequest(event_to_emit, (response) => {
                                        if (response.type === 'rtc:new:success') {
                                            this.application.activeStream.rtc_id = response.body.rtc_id;
                                            pc.trace('rtc_id', this.application.activeStream.rtc_id);
                                            //dont resolve yet, wait for the answer
                                            // resolve(response.type);
                                        } else {
                                            reject(new NexmoApiError(response));
                                        }
                                    });
                                    break;
                                case 'gathering':
                                    this.log.debug('ice gathering gathering');
                                    break;
                            }
                        }
                    })
                    .then(() => {
                        // We want to be able to handle these events, for this  member, before they get propagated out
                        this.parentConversation.on('rtc:answer', 'media_module', (event) => {

                            if (!this.application.activeStream.rtc_id) {
                                this.log.warn("RTC: rtc:new hasn't been resolved yet");
                            } else if (this.application.activeStream.rtc_id !== event.body.rtc_id) {
                                this.log.warn("RTC: skipping  rtc answer for different rtc_id");
                                return;
                            }
                            if (!this.parentConversation.pc) {
                                this.log.warn('RTC: received an answer too late');
                                return;
                            }
                            this.parentConversation.pc.setRemoteDescription(new RTCSessionDescription({
                                type: 'answer',
                                sdp: event.body.answer
                            }),
                                () => {
                                    this.log.debug('remote description is set');
                                },
                                onClientError);
                        });
                        //on member delete (our this)
                        //terminate media
                        this.parentConversation.on('member:left', 'media_module', (member) => {
                            if (member.user.id === this.application.me.id && this.application.activeStream) {
                                this.disable();
                            }
                        });
                    })
                    .catch((error) => {
                        reject(new NexmoClientError(error));
                    });
            }
        });
    }

    /**
     * Disable media particiaption in the conversation for this application
     *
     * @returns {Promise}
     * @example
     *
     * function disable() {
     *   conversation.media.disable()
     *      .then((response) => {
     *       }).catch((error) => {
     *           console.log(error);
     *       });
     * }
     *
     **/
    disable() {
        let promises = [];
        promises.push(this._disableActiveStream());
        promises.push(this._cleanConversationProperties());

        for (const leg_id in this.parentConversation.rtcObjects) {
            promises.push(this._disableLeg(leg_id));
        }
        return Promise.all(promises);
    }

    /**
     * Play a voice text in a conversation
     * @param {object} params
     * @param {string} params.text - the text to say in the conversation
     * @param {string} params.voice_name -
     * @param {number} params.level - [0] -
     * @param {Boolean} params.queue -
     * @param {Boolean} params.loop -
     *
     * @returns {Promise<Event>}
     * @example
     *   conversation.media.say({text:'hi'})
     **/
    sayText(params) {
        return new Promise((resolve, reject) => {
            const msg = {
                type: 'audio:say',
                cid: this.parentConversation.id,
                body: {
                    text: params.text,
                    voice_name: params.voice_name || 'Amy',
                    level: params.level || 1,
                    queue: params.queue || true,
                    loop: params.loop || 1,
                    ssml: params.ssml || false
                }
            };
            this.application.session.sendRequest(msg, (response) => {
                if (response.type === 'audio:say:success') {
                    msg.id = response.body.id;
                    resolve(new Event(this.parentConversation, response));
                } else {
                    reject(new NexmoApiError(response));
                }
            });
        });
    }

    /**
     * Record the audio stream in a conversation
     * @param {object} params
     * @param {string} params.format = (mp3, wav, ogg)
     * @param {Boolean} params.streamed -
     * @param {number} params.validity_time -
     * @param {Boolean} params.beep_start -
     * @param {Boolean} params.beep_stop -~
     * @param {Boolean} params.detect_speech -
     *
     * @returns {Promise<Recording>}
     * @example
     *   conversation.audio.record()
     */
    record(params) {
        return new Promise((resolve, reject) => {
            const msg = {
                type: 'audio:record',
                cid: this.id,
                body: {
                    format: params.format,
                    destination_url: params.destination_url,
                    streamed: params.streamed,
                    validity_time: params.validity_time,
                    beep_start: params.beep_start,
                    beep_stop: params.beep_stop,
                    detect_speech: params.detect_speech
                }
            };
            this.application.session.sendRequest(msg, (response) => {
                if (response.type === 'audio:record:success') {
                    msg.id = response.body.id;
                    resolve(new Recording(this.parentConversation, response));
                } else {
                    reject(new NexmoApiError(response));
                }
            });
        });
    }

    /**
     * Download the recoding file
     * @param {string} url the recording url coming in the recording event
     * @returns {Promise<Event>}
     */
    fetchRecording(url) {
        return new Promise((resolve, reject) => {
            if (!localStorage.getItem("NXMO_user_data")) {
                reject(new NexmoClientError("error:user:relogin"));
            } else {
                const xhr = new XMLHttpRequest();
                const token = JSON.parse(localStorage.getItem("NXMO_user_data")).token;
                xhr.open("GET", url);
                xhr.setRequestHeader("Authorization", "Bearer " + token);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.responseType = 'blob';
                xhr.onload = () => {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        const blob = new Blob([xhr.response], {
                            type: 'audio/ogg'
                        });
                        resolve(URL.createObjectUrl(blob));
                    } else {
                        reject(new NexmoClientError("error:fetch-recording"));
                    }
                };
                xhr.send();
            }
        });
    }

    /**
     * Play an audio stream in a conversation
     * @returns {Promise<Event>}
     */
    playStream(params) {
        return new Promise((resolve, reject) => {
            const msg = {
                type: 'audio:play',
                cid: this.parentConversation.id,
                body: params
            };
            this.application.session.sendRequest(msg, (response) => {
                if (response.type === 'audio:play:success') {
                    msg.id = response.body.id;
                    resolve(new Event(this.parentConversation, response));
                } else {
                    reject(new NexmoApiError(response));
                }
            });
        });
    }

    /**
     * Send start ringing event
     * @returns {Promise<Event>}
     * @example
     * Send ringing event
     * function startRinging() {
     *   conversation.media.startRinging()
     *      .then((response) => {
     *       }).catch((error) => {
     *           console.log(error);
     *       });
     * }
     *
     * conversation.on('audio:ringing:start', (data) => {
     * console.log("ringing");
     * });
     */
    startRinging() {
        return new Promise((resolve, reject) => {
            const msg = {
                type: 'audio:ringing:start',
                cid: this.parentConversation.id,
                from: this.parentConversation.me.id,
                body: {}
            };
            this.application.session.sendRequest(msg, (response) => {
                if (response.type === 'audio:ringing:start:success') {
                    resolve(new Event(this.parentConversation, response));
                } else {
                    reject(new NexmoApiError(response));
                }
            });
        });
    }

    /**
     * Send stop ringing event
     * @returns {Promise<Event>}
     * @example
     * Send ringing event
     * function stopRinging() {
     *   conversation.media.stopRinging()
     *      .then(function(response) {
     *       }).catch(function(error) {
     *           console.log(error);
     *       });
     * }
     *
     * conversation.on('audio:ringing:stop', function(data)){
     * console.log("ringing stopped");
     * }
     */
    stopRinging() {
        return new Promise((resolve, reject) => {
            const msg = {
                type: 'audio:ringing:stop',
                cid: this.parentConversation.id,
                from: this.parentConversation.me.id,
                body: {}
            };
            this.application.session.sendRequest(msg, (response) => {
                if (response.type === 'audio:ringing:stop:success') {
                    resolve(new Event(this.parentConversation, response));
                } else {
                    reject(new NexmoApiError(response));
                }
            });
        });
    }
}

module.exports = Media;
